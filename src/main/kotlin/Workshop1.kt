package org.example

// Workshop #1: Simple Console Application - Unit Converter

fun main() {
    // 2. ‡πÉ‡∏ä‡πâ while (true) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏ô‡∏ã‡πâ‡∏≥
    while (true) {
        // 1. ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        println("===== Unit Converter =====")
        println("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á:")
        println("1. Celsius to Fahrenheit")
        println("2. Kilometers to Miles")
        println("‡∏û‡∏¥‡∏°‡∏û‡πå 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        print("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π (1, 2, or exit): ")
        val choice = readln()
        // 2. ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

        when (choice) {
            "1" -> {
                print("‡∏õ‡πâ‡∏≠‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C): ")
                val input = readln()
                val celsius = input.toDoubleOrNull()
                if (celsius == null) {
                    println("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    continue
                }
                val fahrenheitResult = celsiusToFahrenheit(celsius)
                println("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: $celsius ¬∞C ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö ${"%.2f".format(fahrenheitResult)} ¬∞F")
            }

            "2" -> {
                print("‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (km): ")
                val input = readln()
                val km = input.toDoubleOrNull()
                if (km == null) {
                    println("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    continue
                }
                val milesResult = kilometersToMiles(km)
                println("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: $km km ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö ${"%.2f".format(milesResult)} miles")
            }

            "exit" -> break

            else -> println("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        }
        // 3. ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ when expression
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á Celsius ‡πÄ‡∏õ‡πá‡∏ô Fahrenheit: convertCelsiusToFahrenheit()
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á Kilometers ‡πÄ‡∏õ‡πá‡∏ô Miles: convertKilometersToMiles()
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        // üö®


        println() // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    }
}

// ‡πÅ‡∏õ‡∏•‡∏á Celsius ‡πÄ‡∏õ‡πá‡∏ô Fahrenheit
fun celsiusToFahrenheit(celsius: Double): Double {
    return celsius * 9.0 / 5.0 + 32
}

// ‡πÅ‡∏õ‡∏•‡∏á Kilometers ‡πÄ‡∏õ‡πá‡∏ô Miles
fun kilometersToMiles(kilometers: Double): Double {
    return kilometers * 0.621371
}

fun convertKilometersToMiles(km: Double): Double {
    return km * 0.621371
}

// 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢ Celsius to Fahrenheit: celsiusToFahrenheit
// ‡∏™‡∏π‡∏ï‡∏£ celsius * 9.0 / 5.0 + 32
// üö®


// 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢ Kilometers to Miles: kilometersToMiles
// ‡∏™‡∏π‡∏ï‡∏£ kilometers * 0.621371
// üö®



