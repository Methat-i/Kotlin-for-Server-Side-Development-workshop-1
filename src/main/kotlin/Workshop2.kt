package org.example

// 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î data class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
data class Product(val name: String, val price: Double, val category: String)

fun main() {
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (List<Product>)
    val products: List<Product> = listOf(
        Product(name = "Laptop", price = 35000.0, category = "Electronics"),
        Product(name = "Smartphone", price = 25000.0, category = "Electronics"),
        Product(name = "T-shirt", price = 450.0, category = "Apparel"),
        Product(name = "Monitor", price = 7500.0, category = "Electronics"),
        Product(name = "Keyboard", price = 499.0, category = "Electronics"),
        Product(name = "Jeans", price = 1200.0, category = "Apparel"),
        Product(name = "Headphones", price = 1800.0, category = "Electronics")
    )
    // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ name = "Laptop", price = 35000.0, category = "Electronics"
    // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ name = "Smartphone", price = 25000.0, category = "Electronics"
    // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ name = "T-shirt", price = 450.0, category = "Apparel"
    // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ name = "Monitor", price = 7500.0, category = "Electronics"
    // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ name = "Keyboard", price = 499.0, category = "Electronics" // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500
    // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ name = "Jeans", price = 1200.0, category = "Apparel"
    // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ name = "Headphones", price = 1800.0, category = "Electronics" // ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç


    println("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
    products.forEach { println(it) }
    println("--------------------------------------------------")


    // --- ‡πÇ‡∏à‡∏ó‡∏¢‡πå: ‡∏à‡∏á‡∏´‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î 'Electronics' ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 500 ‡∏ö‡∏≤‡∏ó ---

    // 3. ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Chaining ‡∏Å‡∏±‡∏ö List ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î Electronics
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 500
    // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô List<Double>
    // ‡∏´‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
//üö®    val totalElecPriceOver500 = ?
    val totalElecPriceOver500 = products.filter { it.category == "Electronics" && it.price > 500 }
        .fold(0.0) { acc, product -> acc + product.price }






    println("‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ Chaining ‡∏Å‡∏±‡∏ö List")
    println("‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Electronics ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ > 500 ‡∏ö‡∏≤‡∏ó: $totalElecPriceOver500 ‡∏ö‡∏≤‡∏ó")
    println("--------------------------------------------------")


    // 4. (‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á) ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ .asSequence() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    // ‡πÅ‡∏õ‡∏•‡∏á List ‡πÄ‡∏õ‡πá‡∏ô Sequence ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
//üö®    val totalElecPriceOver500Sequence = ?

    println("‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ .asSequence() (‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á)")
    val totalElecPriceOver500Sequence = products.asSequence().filter { it.category == "Electronics" && it.price > 500 }
        .fold(0.0) { acc, product -> acc + product.price }
    println("‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Electronics ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ > 500 ‡∏ö‡∏≤‡∏ó: $totalElecPriceOver500Sequence ‡∏ö‡∏≤‡∏ó")
    println("--------------------------------------------------")

    data class Product(val name: String, val price: Double, val category: String)

    fun calculateTotalElectronicsPriceOver500(products: List<Product>): Double {
        return products
            .filter { it.category == "Electronics" && it.price > 500 }
            .sumOf { it.price }
    }

    fun countElectronicsOver500(products: List<Product>): Int {
        return products.count { it.category == "Electronics" && it.price > 500 }
    }



    val group = products.groupBy {
        when {
            it.price < 1000 -> "<1000"
            it.price < 9999 && it.price > 1000 -> "<9999"
            else -> ">10000"
        }
    }

    group.forEach { (range, items) ->

            println("$range: ")
            items.forEach { println("${it.name} ${it.price}") }

    }




}

fun totalElecPriceOver500Sequences(products: List<Product>): Double {
    val totalElecPriceOver500s =  products
        .asSequence()
        .filter { it.category == "Electronics" }
        .filter { it.price > 500.0 }
        .map { it.price }
        .fold(0.0) { acc, it -> acc + it }
    return totalElecPriceOver500s
}

fun totalElecPriceOver500(products: List<Product>): Int {
    val totalElecPriceOver500s =  products
        .filter { it.category == "Electronics" && it.price > 500.0 }
        .size
    return totalElecPriceOver500s
}